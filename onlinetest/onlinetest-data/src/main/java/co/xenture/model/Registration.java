package co.xenture.model;
// Generated Mar 7, 2018 12:53:46 PM by Hibernate Tools 5.2.3.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Registration generated by hbm2java
 */
@Entity
@Table(name = "registration", catalog = "xenture_online_test", uniqueConstraints = @UniqueConstraint(columnNames = "candidate_email"))
public class Registration implements java.io.Serializable {

	private Integer candidateId;
	private College college;
	private Categories questionCategories;
	private StateMaster stateMaster;
	private String candidateFullName;
	private String candidateEmail;
	private String candidateContactNo;
	private String candidatePassoutYear;
	private Integer candidateFresherExp;
	private String candidateAddress;
	private String candidatePassword;
	private Date candidateCreatedOn;
	private Date candidateUpdatedOn;
	private String candidateIpAddress;
	private String cityId;
	private Integer testScore;
	private String candidateOffcampusOncampus;
	private String candidateCompany;
	private String testScoreCategory;
	private String totalTestScore;
	private String finalResultAdminDetails;
	private Set<Notification> notifications = new HashSet<Notification>(0);
	private Set<DescriptiveAnswer> descriptiveAnswers = new HashSet<DescriptiveAnswer>(0);

	public Registration() {
	}

	public Registration(College college, String candidateFullName, String candidateEmail, String candidateAddress,
			String candidatePassword, Date candidateCreatedOn) {
		this.college = college;
		this.candidateFullName = candidateFullName;
		this.candidateEmail = candidateEmail;
		this.candidateAddress = candidateAddress;
		this.candidatePassword = candidatePassword;
		this.candidateCreatedOn = candidateCreatedOn;
	}

	public Registration(College college, Categories questionCategories, StateMaster stateMaster,
			String candidateFullName, String candidateEmail, String candidateContactNo, String candidatePassoutYear,
			Integer candidateFresherExp, String candidateAddress, String candidatePassword, Date candidateCreatedOn,
			Date candidateUpdatedOn, String candidateIpAddress, String cityId, Integer testScore,
			String candidateOffcampusOncampus, String candidateCompany, String testScoreCategory, String totalTestScore,
			String finalResultAdminDetails, Set<Notification> notifications,
			Set<DescriptiveAnswer> descriptiveAnswers) {
		this.college = college;
		this.questionCategories = questionCategories;
		this.stateMaster = stateMaster;
		this.candidateFullName = candidateFullName;
		this.candidateEmail = candidateEmail;
		this.candidateContactNo = candidateContactNo;
		this.candidatePassoutYear = candidatePassoutYear;
		this.candidateFresherExp = candidateFresherExp;
		this.candidateAddress = candidateAddress;
		this.candidatePassword = candidatePassword;
		this.candidateCreatedOn = candidateCreatedOn;
		this.candidateUpdatedOn = candidateUpdatedOn;
		this.candidateIpAddress = candidateIpAddress;
		this.cityId = cityId;
		this.testScore = testScore;
		this.candidateOffcampusOncampus = candidateOffcampusOncampus;
		this.candidateCompany = candidateCompany;
		this.testScoreCategory = testScoreCategory;
		this.totalTestScore = totalTestScore;
		this.finalResultAdminDetails = finalResultAdminDetails;
		this.notifications = notifications;
		this.descriptiveAnswers = descriptiveAnswers;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "candidate_id", unique = true, nullable = false)
	public Integer getCandidateId() {
		return this.candidateId;
	}

	public void setCandidateId(Integer candidateId) {
		this.candidateId = candidateId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "college_id", nullable = false)
	public College getCollege() {
		return this.college;
	}

	public void setCollege(College college) {
		this.college = college;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "question_categories_id")
	public Categories getQuestionCategories() {
		return this.questionCategories;
	}

	public void setQuestionCategories(Categories questionCategories) {
		this.questionCategories = questionCategories;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "state_id")
	public StateMaster getStateMaster() {
		return this.stateMaster;
	}

	public void setStateMaster(StateMaster stateMaster) {
		this.stateMaster = stateMaster;
	}

	@Column(name = "candidate_full_name", nullable = false, length = 100)
	public String getCandidateFullName() {
		return this.candidateFullName;
	}

	public void setCandidateFullName(String candidateFullName) {
		this.candidateFullName = candidateFullName;
	}

	@Column(name = "candidate_email", unique = true, nullable = false, length = 50)
	public String getCandidateEmail() {
		return this.candidateEmail;
	}

	public void setCandidateEmail(String candidateEmail) {
		this.candidateEmail = candidateEmail;
	}

	@Column(name = "candidate_contact_no", length = 15)
	public String getCandidateContactNo() {
		return this.candidateContactNo;
	}

	public void setCandidateContactNo(String candidateContactNo) {
		this.candidateContactNo = candidateContactNo;
	}

	@Column(name = "candidate_passout_year", length = 10)
	public String getCandidatePassoutYear() {
		return this.candidatePassoutYear;
	}

	public void setCandidatePassoutYear(String candidatePassoutYear) {
		this.candidatePassoutYear = candidatePassoutYear;
	}

	@Column(name = "candidate_fresher_exp")
	public Integer getCandidateFresherExp() {
		return this.candidateFresherExp;
	}

	public void setCandidateFresherExp(Integer candidateFresherExp) {
		this.candidateFresherExp = candidateFresherExp;
	}

	@Column(name = "candidate_address", nullable = false, length = 300)
	public String getCandidateAddress() {
		return this.candidateAddress;
	}

	public void setCandidateAddress(String candidateAddress) {
		this.candidateAddress = candidateAddress;
	}

	@Column(name = "candidate_password", nullable = false, length = 15)
	public String getCandidatePassword() {
		return this.candidatePassword;
	}

	public void setCandidatePassword(String candidatePassword) {
		this.candidatePassword = candidatePassword;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "candidate_created_on", nullable = false, length = 19)
	public Date getCandidateCreatedOn() {
		return this.candidateCreatedOn;
	}

	public void setCandidateCreatedOn(Date candidateCreatedOn) {
		this.candidateCreatedOn = candidateCreatedOn;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "candidate_updated_on", length = 10)
	public Date getCandidateUpdatedOn() {
		return this.candidateUpdatedOn;
	}

	public void setCandidateUpdatedOn(Date candidateUpdatedOn) {
		this.candidateUpdatedOn = candidateUpdatedOn;
	}

	@Column(name = "candidate_ip_address", length = 20)
	public String getCandidateIpAddress() {
		return this.candidateIpAddress;
	}

	public void setCandidateIpAddress(String candidateIpAddress) {
		this.candidateIpAddress = candidateIpAddress;
	}

	@Column(name = "city_id")
	public String getCityId() {
		return this.cityId;
	}

	public void setCityId(String cityId) {
		this.cityId = cityId;
	}

	@Column(name = "TestScore")
	public Integer getTestScore() {
		return this.testScore;
	}

	public void setTestScore(Integer testScore) {
		this.testScore = testScore;
	}

	@Column(name = "candidate_offcampusOncampus", length = 45)
	public String getCandidateOffcampusOncampus() {
		return this.candidateOffcampusOncampus;
	}

	public void setCandidateOffcampusOncampus(String candidateOffcampusOncampus) {
		this.candidateOffcampusOncampus = candidateOffcampusOncampus;
	}

	@Column(name = "candidate_company")
	public String getCandidateCompany() {
		return this.candidateCompany;
	}

	public void setCandidateCompany(String candidateCompany) {
		this.candidateCompany = candidateCompany;
	}

	@Column(name = "test_score_category", length = 55)
	public String getTestScoreCategory() {
		return this.testScoreCategory;
	}

	public void setTestScoreCategory(String testScoreCategory) {
		this.testScoreCategory = testScoreCategory;
	}

	@Column(name = "total_test_score", length = 45)
	public String getTotalTestScore() {
		return this.totalTestScore;
	}

	public void setTotalTestScore(String totalTestScore) {
		this.totalTestScore = totalTestScore;
	}

	@Column(name = "final_result_admin_details")
	public String getFinalResultAdminDetails() {
		return this.finalResultAdminDetails;
	}

	public void setFinalResultAdminDetails(String finalResultAdminDetails) {
		this.finalResultAdminDetails = finalResultAdminDetails;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "registration")
	public Set<Notification> getNotifications() {
		return this.notifications;
	}

	public void setNotifications(Set<Notification> notifications) {
		this.notifications = notifications;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "registration")
	public Set<DescriptiveAnswer> getDescriptiveAnswers() {
		return this.descriptiveAnswers;
	}

	public void setDescriptiveAnswers(Set<DescriptiveAnswer> descriptiveAnswers) {
		this.descriptiveAnswers = descriptiveAnswers;
	}

}
